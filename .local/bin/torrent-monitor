#!/usr/bin/env zsh

# Torrent Troubleshooter

# Configuration
DOWNLOAD_LOG="${HOME}/.torrent-troubleshoot.log"
DOWNLOAD_DIR="${HOME}/Downloads/Torrents"
ARIA2_RPC_PORT=6800

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$DOWNLOAD_LOG"
}

# Detailed download diagnostics
diagnose_download() {
    local gid="$1"

    if [[ -z "$gid" ]]; then
        log "Error: No GID provided"
        return 1
    fi

    # Get full download status
    local response=$(curl -s -X POST -H "Content-Type: application/json" \
        --data "{\"jsonrpc\":\"2.0\",\"method\":\"aria2.tellStatus\",\"id\":1,\"params\":[\"$gid\"]}" \
        http://localhost:${ARIA2_RPC_PORT}/jsonrpc)

    # Detailed diagnostic output
    echo "=== DOWNLOAD DIAGNOSTICS ==="
    echo "$response" | jq '
        "GID: \(.result.gid)",
        "Status: \(.result.status)",
        "Progress: \(
            if (.result.totalLength | tostring | tonumber) > 0 
            then (((.result.completedLength | tostring | tonumber) / (.result.totalLength | tostring | tonumber) * 100) | round)
            else 0
        end)%",
        "Completed: \((.result.completedLength | tostring | tonumber / 1024 / 1024) | round) MB / \((.result.totalLength | tostring | tonumber / 1024 / 1024) | round) MB",
        "Download Speed: \((.result.downloadSpeed | tostring | tonumber / 1024) | round) KB/s",
        "Connections: \(.result.connections)",
        "Seeders: \(.result.numSeeders)",
        "Files: \(.result.files[0].path)",
        "\n=== BITTORRENT DETAILS ===",
        "Announce List: \(.result.bittorrent.announceList | length) trackers",
        "Info Hash: \(.result.infoHash)",
        "Piece Length: \(.result.pieceLength)",
        "Number of Pieces: \(.result.numPieces)"
    '

    # Check trackers
    echo -e "\n=== TRACKER DETAILS ==="
    curl -s -X POST -H "Content-Type: application/json" \
        --data "{\"jsonrpc\":\"2.0\",\"method\":\"aria2.getTrackers\",\"id\":1,\"params\":[\"$gid\"]}" \
        http://localhost:${ARIA2_RPC_PORT}/jsonrpc | jq '.result[] | 
            "Tracker: \(.uri)",
            "Status: \(.status)"
        '

    # Troubleshooting recommendations
    echo -e "\n=== TROUBLESHOOTING RECOMMENDATIONS ==="
    if [[ $(echo "$response" | jq '.result.numSeeders | tonumber') -eq 0 ]]; then
        echo "- No seeders detected. The torrent might be dead."
        echo "- Try finding an alternative torrent source"
    fi

    if [[ $(echo "$response" | jq '.result.bittorrent.announceList | length') -eq 0 ]]; then
        echo "- No trackers found in the torrent file"
        echo "- Consider adding trackers manually"
    fi

    if [[ $(echo "$response" | jq '.result.connections | tonumber') -eq 0 ]]; then
        echo "- No active connections"
        echo "- Check your network connection"
        echo "- Verify VPN or firewall settings"
    fi
}

# Force restart the download
restart_download() {
    local gid="$1"

    if [[ -z "$gid" ]]; then
        log "Error: No GID provided"
        return 1
    fi

    # Remove the current download
    curl -s -X POST -H "Content-Type: application/json" \
        --data "{\"jsonrpc\":\"2.0\",\"method\":\"aria2.remove\",\"id\":1,\"params\":[\"$gid\"]}" \
        http://localhost:${ARIA2_RPC_PORT}/jsonrpc

    # Optionally, force remove
    curl -s -X POST -H "Content-Type: application/json" \
        --data "{\"jsonrpc\":\"2.0\",\"method\":\"aria2.forceRemove\",\"id\":1,\"params\":[\"$gid\"]}" \
        http://localhost:${ARIA2_RPC_PORT}/jsonrpc

    log "Removed download $gid"
}

# Add more trackers
add_trackers() {
    local gid="$1"

    if [[ -z "$gid" ]]; then
        log "Error: No GID provided"
        return 1
    fi

    # List of public trackers
    local trackers=(
        "udp://tracker.opentrackr.org:1337/announce"
        "udp://tracker.coppersphere.org:6969/announce"
        "udp://tracker.torrent.eu.org:451/announce"
        "udp://tracker.bittor.pw:1337/announce"
        "udp://tracker.dler.org:6969/announce"
        "udp://opentracker.i2p.rocks:6969/announce"
        "udp://tracker.openbittorrent.com:6969/announce"
    )

    # Construct tracker list for RPC call
    local tracker_list=$(printf '%s\n' "${trackers[@]}" | jq -R . | jq -s .)

    # Add trackers via RPC
    curl -s -X POST -H "Content-Type: application/json" \
        --data "{\"jsonrpc\":\"2.0\",\"method\":\"aria2.changeOption\",\"id\":1,\"params\":[\"$gid\", {\"bt-tracker\": $(echo "$tracker_list" | jq -c '. | join(",")')}]}" \
        http://localhost:${ARIA2_RPC_PORT}/jsonrpc

    log "Added $(echo "$tracker_list" | jq 'length') trackers to download $gid"
}

# Main function to handle commands
main() {
    # Ensure aria2c RPC is running
    if ! nc -z localhost $ARIA2_RPC_PORT 2>/dev/null; then
        log "Error: aria2c RPC server not running on port $ARIA2_RPC_PORT"
        log "Start aria2c with RPC enabled: aria2c --enable-rpc"
        return 1
    fi

    case "$1" in
        diagnose)
            shift
            diagnose_download "$1"
            ;;
        restart)
            shift
            restart_download "$1"
            ;;
        trackers)
            shift
            add_trackers "$1"
            ;;
        *)
            echo "Usage:"
            echo "  $0 diagnose <gid>   # Detailed download diagnostics"
            echo "  $0 restart <gid>    # Force restart the download"
            echo "  $0 trackers <gid>   # Add more trackers to the download"
            exit 1
            ;;
    esac
}

main "$@"
