#!/usr/bin/env python3

import os
import re
import json
import html
import time
import logging
import requests
import subprocess
import tempfile
from pathlib import Path
from datetime import datetime
from bs4 import BeautifulSoup
from urllib.parse import quote_plus

# Configuration
DOWNLOAD_DIR = os.path.expanduser("~/Downloads/Torrents/Movies")
SEARCH_SITE = "https://1337x.to"
LOG_FILE = os.path.expanduser("~/.movie-torrent-searcher.log")
RPC_URL = "http://localhost:6800/jsonrpc"
USER_AGENT = "Mozilla/5.0"

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def sanitize_input(query):
    """Clean input for searching"""
    if not query:
        return ""
    # Only allow alphanumeric, spaces, dots, and hyphens
    return re.sub(r'[^\w\s.-]', '', query.lower())

def extract_year(query):
    """Extract year from movie title"""
    # Look for patterns like (2022), [2022], or standalone 2022
    year_match = re.search(r'\((\d{4})\)|\[(\d{4})\]|(\d{4})', query)
    
    if year_match:
        # Find the first non-None group (the actual year)
        year = next(group for group in year_match.groups() if group is not None)
        
        # Clean query by removing the year and any brackets
        clean_query = re.sub(r'\(\d{4}\)|\[\d{4}\]|\d{4}', '', query).strip()
        return clean_query, year
    
    return query, ""

def build_search_url(query):
    """Build search URL for the torrent site"""
    sanitized = sanitize_input(query)
    encoded = quote_plus(sanitized)
    return f"{SEARCH_SITE}/search/{encoded}/1/"

def fetch_html(url):
    """Fetch HTML content from URL with proper headers"""
    headers = {"User-Agent": USER_AGENT}
    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        return response.text
    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching {url}: {e}")
        return None

def extract_torrent_links(html_content):
    """Extract torrent detail page links from search results"""
    if not html_content:
        return []
    
    # Try BeautifulSoup first
    soup = BeautifulSoup(html_content, 'html.parser')
    links = soup.select('a[href^="/torrent/"]')
    
    if links:
        return [link.get('href') for link in links if link and not link.get('href').endswith('#')]
    
    # Fallback to regex if BeautifulSoup doesn't find anything
    matches = re.findall(r'href="(/torrent/[^"#]+)"', html_content)
    return matches

def extract_magnet_link(html_content):
    """Extract and properly decode magnet link from torrent detail page"""
    if not html_content:
        return None
    
    # Try BeautifulSoup first
    soup = BeautifulSoup(html_content, 'html.parser')
    magnet_element = soup.select_one('a[href^="magnet:"]')
    
    if magnet_element:
        # Properly decode HTML entities in the magnet link
        return html.unescape(magnet_element.get('href'))
    
    # Fallback to regex
    match = re.search(r'href="(magnet:[^"]+)"', html_content)
    if match:
        return html.unescape(match.group(1))
    
    return None

def extract_title(html_content):
    """Extract title from torrent detail page"""
    if not html_content:
        return None
    
    # Try BeautifulSoup first
    soup = BeautifulSoup(html_content, 'html.parser')
    title_element = soup.select_one('div.box-info-heading h1')
    
    if title_element:
        return title_element.get_text(strip=True)
    
    # Fallback to regex
    match = re.search(r'<h1>([^<]+)</h1>', html_content)
    if match:
        return match.group(1).strip()
    
    return None

def calculate_movie_score(title, year=""):
    """Calculate quality score for a movie torrent based on title with emphasis on best audio quality and BluRay source"""
    score = 0
    title_lower = title.lower()
    
    # Year matching
    if year and year in title_lower:
        score += 10
    
    # Resolution scoring - strongly prioritize 1080p for movies
    if "1080p" in title_lower:
        score += 15  # Increased from 10
    elif "720p" in title_lower:
        score += 5   # Decreased from 8
    elif "2160p" in title_lower or "4k" in title_lower:
        score -= 10  # Strongly penalize 4K/2160p
    
    # Source quality scoring - heavily prioritize BluRay
    if "remux" in title_lower and ("bluray" in title_lower or "blu-ray" in title_lower):
        score += 25  # Highest score for BluRay remux (best quality)
    elif "bluray" in title_lower or "blu-ray" in title_lower:
        score += 20  # Significantly increased from 7
    elif "web-dl" in title_lower or "webrip" in title_lower:
        score += 5   # Same value
    elif "hdtv" in title_lower:
        score += 1   # Decreased from 2
    
    # Audio quality scoring - significantly increased weights
    if "atmos" in title_lower:
        score += 10  # Increased from 4
    elif "truehd" in title_lower:
        score += 10  # Increased from 4
    elif "dts-hd ma" in title_lower:
        score += 9   # New specific category for DTS-HD Master Audio
    elif "dts-hd" in title_lower or "dtshd" in title_lower:
        score += 8   # Increased from 3
    elif "dts" in title_lower:
        score += 7   # Increased from 2
    elif "dd5.1" in title_lower or "ac3" in title_lower:
        score += 5   # Increased from 2
    
    # Encoding quality
    if "remux" in title_lower:
        score += 8   # Increased from 6 (but less important than source)
    elif "x265" in title_lower or "hevc" in title_lower:
        score += 4   # Same value
    elif "x264" in title_lower:
        score += 3   # Same value
    
    logger.debug(f"Score breakdown for '{title}': {score}")
    return score

def find_best_movie_torrent(links, year=""):
    """Find the best matching movie torrent based on quality"""
    best_torrent = None
    best_score = -1
    best_title = None
    
    for link in links:
        torrent_url = f"{SEARCH_SITE}{link}"
        logger.info(f"Processing: {torrent_url}")
        
        html_content = fetch_html(torrent_url)
        title = extract_title(html_content)
        
        if not title:
            logger.warning(f"Couldn't extract title for {torrent_url}, skipping")
            continue
        
        score = calculate_movie_score(title, year)
        magnet_link = extract_magnet_link(html_content)
        
        if magnet_link:
            logger.info(f"Found magnet link for \"{title}\" with score {score}")
            
            if score > best_score:
                best_score = score
                best_torrent = magnet_link
                best_title = title
                logger.info(f"New best match: \"{title}\" with score {score}")
        else:
            logger.warning(f"No magnet link found for \"{title}\"")
    
    return best_torrent, best_title

def is_aria2c_running():
    """Check if aria2c is running"""
    try:
        subprocess.run(["pgrep", "-x", "aria2c"], check=True, capture_output=True)
        return True
    except subprocess.CalledProcessError:
        return False

def start_aria2c():
    """Start aria2c if it's not running"""
    logger.info("aria2c service not running, starting it...")
    cmd = [
        "aria2c", 
        "--enable-rpc", 
        "--rpc-listen-all=true", 
        "--rpc-allow-origin-all",
        f"--dir={DOWNLOAD_DIR}", 
        "--daemon=true"
    ]
    subprocess.run(cmd)
    time.sleep(2)  # Give it a moment to start

def download_via_aria2c(magnet_link, title):
    """Download torrent via aria2c RPC"""
    if not magnet_link or not magnet_link.startswith("magnet:?"):
        logger.error(f"Invalid magnet link: {magnet_link}")
        return False
    
    logger.info(f"Downloading \"{title}\" via aria2c")
    
    if not is_aria2c_running():
        start_aria2c()
    
    # Create temp file for JSON payload
    with tempfile.NamedTemporaryFile(mode='w', delete=False) as temp:
        json_payload = {
            "jsonrpc": "2.0",
            "id": "1",
            "method": "aria2.addUri",
            "params": [
                [magnet_link], 
                {
                    "pause": "false", 
                    "select-file": "1-999999",
                    "bt-metadata-only": "false",
                    "follow-torrent": "true"
                }
            ]
        }
        json.dump(json_payload, temp)
        temp_path = temp.name
    
    # Send request to aria2c
    try:
        result = subprocess.run(
            ["curl", "-s", "http://localhost:6800/jsonrpc",
             "--header", "Content-Type: application/json",
             "--data", f"@{temp_path}"],
            capture_output=True,
            text=True,
            check=True
        )
        
        # Parse the response
        response = json.loads(result.stdout)
        os.unlink(temp_path)  # Clean up temp file
        
        if "result" in response:
            gid = response["result"]
            logger.info(f"Download started successfully with GID: {gid}")
            return True
        else:
            logger.error(f"Error from aria2c: {response}")
            return False
    
    except (subprocess.CalledProcessError, json.JSONDecodeError) as e:
        logger.error(f"Error sending to aria2c: {e}")
        os.unlink(temp_path)  # Clean up temp file
        return False

def search_movie_torrents(query):
    """Search for movie torrents and return the best match"""
    clean_query, year = extract_year(query)
    
    search_url = build_search_url(clean_query)
    if year:
        logger.info(f"Searching: {clean_query} ({year})")
    else:
        logger.info(f"Searching: {clean_query}")
    logger.info(f"Search URL: {search_url}")
    
    html_content = fetch_html(search_url)
    if not html_content:
        logger.error(f"No results found for '{query}'")
        return None, None
    
    links = extract_torrent_links(html_content)
    if not links:
        logger.error(f"No results found for '{query}'")
        return None, None
    
    return find_best_movie_torrent(links, year)

def main():
    """Main entry point"""
    import sys
    
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <movie title> [year]")
        print(f"Example: {sys.argv[0]} 'The Godfather 1972'")
        print(f"Example: {sys.argv[0]} 'Inception (2010)'")
        sys.exit(1)
    
    # Create download directory if it doesn't exist
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    
    # Search for torrents
    query = " ".join(sys.argv[1:])
    magnet_link, title = search_movie_torrents(query)
    
    if magnet_link and title:
        print(f"Selected torrent: \"{title}\"")
        print(f"Magnet link: {magnet_link[:60]}...")
        
        # Download the torrent
        success = download_via_aria2c(magnet_link, title)
        if not success:
            print("ERROR: Failed to start download")
            sys.exit(1)
    else:
        print(f"No suitable torrents found for \"{query}\"")
        sys.exit(1)

if __name__ == "__main__":
    main()
