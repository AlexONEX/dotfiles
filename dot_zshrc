# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

if [ -f ~/.zsh/aliases ]; then
    . ~/.zsh/aliases
fi

autoload -Uz compinit
compinit

#-------Plugin Management-------#
ZPLUGINDIR=${ZPLUGINDIR:-${ZDOTDIR:-$HOME/.zsh}/plugins}

if [[ ! -d $ZPLUGINDIR/zsh_unplugged ]]; then
  git clone --quiet https://github.com/mattmc3/zsh_unplugged $ZPLUGINDIR/zsh_unplugged
fi
source $ZPLUGINDIR/zsh_unplugged/zsh_unplugged.zsh

repos=(
    aikow/zsh-auto-ls
    gimbo/gimbo-git.zsh
    jeffreytse/zsh-vi-mode
    Junker/zsh-archlinux
    marlonrichert/zsh-autocomplete
    martvdmoosdijk/zsh-marks
    romkatv/powerlevel10k
    zsh-users/zsh-syntax-highlighting
    zsh-users/zsh-autosuggestions
    z-shell/zsh-diff-so-fancy
)

plugin-load $repos
function plugin-update {
  ZPLUGINDIR=${ZPLUGINDIR:-$HOME/.config/zsh/plugins}
  for d in $ZPLUGINDIR/*/.git(/); do
    echo "Updating ${d:h:t}"
    command git -C "${d:h}" pull --ff --recurse-submodules --depth 1 --rebase --autostash
  done
}


#--------Enviroment Variables--------#
export XDG_CACHE_HOME=$HOME/.cache
export TERM="tmux-256color"
export HISTORY_IGNORE="(ls|cd|pwd|exit|sudo reboot|history|cd -|cd ..)"

export EDITOR=nvim
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export VISUAL=/bin/nvim
export DOTFILES=$HOME/.local/share/chezmoi/
export PROJECTS_DIR=$HOME/Github/
export NPM_PREFIX_DIR=$HOME/.node_modules

export ZSH="$HOME/.zsh"
export PATH=~/.npm-global/bin:$PATH
export PATH="/usr/src/linux-headers-$(uname -r)/include:$PATH"
export PATH="$HOME/.spicetify/:$PATH"
typeset -U PATH path


if [ -d "$HOME/.local/bin" ] ;
  then PATH="$HOME/.local/bin:$PATH"
fi
if [ -d "$HOME/.emacs.d/bin" ] ;
  then PATH="$HOME/.emacs.d/bin:$PATH"
fi
if [ -d "$HOME/Applications" ] ;
  then PATH="$HOME/Applications:$PATH"
fi
if [ -d "$HOME/go/bin" ] ;
  then PATH="$HOME/go/bin:$PATH"
fi

export PATH=$PATH:/home/alex/.spicetify

#Managing python venv
export WORKON_HOME=$HOME/.virtualenvs
source /usr/bin/virtualenvwrapper.sh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
#[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
#-------------------------------#
zstyle ':omz:update' mode auto      # update automatically without asking
zstyle ':omz:update' frequency 13
bindkey -v

extract() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar x $1       ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *.xz)        xz -d $1       ;;
      *)           echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi 
}
extractf() {
  if [ -f "$1" ]; then
    # Get the filename without extension
    folder_name="${1%.*}"
    case $1 in
      *.tar.bz2)   tar xjf "$1" -C "$folder_name" ;;
      *.tar.gz)    tar xzf "$1" -C "$folder_name" ;;
      *.bz2)       bunzip2 "$1" -C "$folder_name" ;;
      *.rar)       unrar x "$1" "$folder_name" ;;
      *.gz)        gunzip "$1" -C "$folder_name" ;;
      *.tar)       tar xf "$1" -C "$folder_name" ;;
      *.tbz2)      tar xjf "$1" -C "$folder_name" ;;
      *.tgz)       tar xzf "$1" -C "$folder_name" ;;
      *.zip)       unzip "$1" -d "$folder_name" ;;
      *.Z)         uncompress "$1" -C "$folder_name" ;;
      *.7z)        7z x "$1" -o"$folder_name" ;;
      *.xz)        xz -d "$1" -C "$folder_name" ;;
      *)           echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

webToPDF() {
    # Solicitar al usuario la fuente y el título del PDF
    echo "Introduce la URL de la fuente:"
    read source
    echo "Introduce el título del PDF:"
    read title

    # Usar curl para convertir la fuente en PDF
    curl \
        -u 'api:3e5153da1ecd4259af582ca739c2971a' \
        -H 'Content-Type: application/json' \
        -d "{\"source\":\"$source\",\"landscape\":false,\"use_print\":false}" \
        https://api.pdfshift.io/v3/convert/pdf/ \
        -o "${title}.pdf"

    echo "PDF guardado como ${title}.pdf"
}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
